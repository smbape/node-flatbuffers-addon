diff --git a/include/flatbuffers/code_generators.h b/include/flatbuffers/code_generators.h
index c2ed707a..81cf7b4b 100644
--- a/include/flatbuffers/code_generators.h
+++ b/include/flatbuffers/code_generators.h
@@ -70,6 +70,7 @@ class CodeWriter {
 class BaseGenerator {
  public:
   virtual bool generate() = 0;
+  virtual std::string generateCode();
 
   static std::string NamespaceDir(const Parser &parser, const std::string &path,
                                   const Namespace &ns);
diff --git a/include/flatbuffers/idl.h b/include/flatbuffers/idl.h
index 8299fe0c..ae166370 100644
--- a/include/flatbuffers/idl.h
+++ b/include/flatbuffers/idl.h
@@ -398,6 +398,7 @@ struct ServiceDef : public Definition {
 // Container of options that may apply to any of the source/text generators.
 struct IDLOptions {
   bool strict_json;
+  bool ignore_null_scalar;
   bool skip_js_exports;
   bool use_goog_js_export_format;
   bool use_ES6_js_export_format;
@@ -476,6 +477,7 @@ struct IDLOptions {
 
   IDLOptions()
       : strict_json(false),
+        ignore_null_scalar(false),
         skip_js_exports(false),
         use_goog_js_export_format(false),
         use_ES6_js_export_format(false),
@@ -524,6 +526,9 @@ struct ParserState {
         line_start_(nullptr),
         line_(0),
         token_(-1),
+        has_length_(false),
+        len_(0),
+        eof_(nullptr),
         attr_is_trivial_ascii_string_(true) {}
 
  protected:
@@ -547,6 +552,9 @@ struct ParserState {
   const char *line_start_;
   int line_;  // the current line being parsed
   int token_;
+  bool has_length_;
+  unsigned int len_;
+  const char *eof_;
 
   // Flag: text in attribute_ is true ASCII string without escape
   // sequences. Only printable ASCII (without [\t\r\n]).
@@ -666,6 +674,9 @@ class Parser : public ParserState {
   bool Parse(const char *_source, const char **include_paths = nullptr,
              const char *source_filename = nullptr);
 
+  // Set the maximum size to process.
+  void SetContentLength(const bool has_length, const unsigned int len);
+
   // Set the root type. May override the one set in the schema.
   bool SetRootType(const char *name);
 
@@ -868,6 +879,10 @@ extern bool GenerateDart(const Parser &parser,
                          const std::string &path,
                          const std::string &file_name);
 
+// Generate JavaScript or TypeScript code from the definitions in the Parser object.
+// See idl_gen_js.
+extern std::string GenerateJSTSCode(const Parser &parser);
+
 // Generate JavaScript or TypeScript code from the definitions in the Parser object.
 // See idl_gen_js.
 extern bool GenerateJSTS(const Parser &parser,
diff --git a/src/code_generators.cpp b/src/code_generators.cpp
index 3b10db7f..5bdb0ce5 100644
--- a/src/code_generators.cpp
+++ b/src/code_generators.cpp
@@ -69,6 +69,10 @@ const char *BaseGenerator::FlatBuffersGeneratedWarning() {
          " do not modify";
 }
 
+std::string BaseGenerator::generateCode() {
+    return NULL;
+}
+
 std::string BaseGenerator::NamespaceDir(const Parser &parser,
                                         const std::string &path,
                                         const Namespace &ns) {
diff --git a/src/flatc.cpp b/src/flatc.cpp
index 78e4c5bf..40fd61c4 100644
--- a/src/flatc.cpp
+++ b/src/flatc.cpp
@@ -77,6 +77,7 @@ std::string FlatCompiler::GetUsageString(const char *program_name) const {
     "  --version          Print the version number of flatc and exit.\n"
     "  --strict-json      Strict JSON: field names must be / will be quoted,\n"
     "                     no trailing commas in tables/vectors.\n"
+    "  --ignore-null-scalar Ignore null values for scalar types\n"
     "  --allow-non-utf8   Pass non-UTF-8 input through parser and emit nonstandard\n"
     "                     \\x escapes in JSON. (Default is to raise parse error on\n"
     "                     non-UTF-8 input.)\n"
@@ -210,6 +211,8 @@ int FlatCompiler::Compile(int argc, const char **argv) {
         opts.keep_include_path = true;
       } else if (arg == "--strict-json") {
         opts.strict_json = true;
+      } else if (arg == "--ignore-null-scalar") {
+        opts.ignore_null_scalar = true;
       } else if (arg == "--allow-non-utf8") {
         opts.allow_non_utf8 = true;
       } else if (arg == "--natural-utf8") {
diff --git a/src/idl_gen_js_ts.cpp b/src/idl_gen_js_ts.cpp
index fea46208..cae08bf6 100644
--- a/src/idl_gen_js_ts.cpp
+++ b/src/idl_gen_js_ts.cpp
@@ -82,7 +82,7 @@ class JsTsGenerator : public BaseGenerator {
         lang_(GetJsLangParams(parser_.opts.lang)) {}
   // Iterate through all definitions we haven't generate code for (enums,
   // structs, and tables) and output them to a single file.
-  bool generate() {
+  std::string generateCode() {
     imported_fileset imported_files;
     reexport_map reexports;
 
@@ -112,6 +112,11 @@ class JsTsGenerator : public BaseGenerator {
       code += exports_code;
     }
 
+    return code;
+  }
+ 
+  bool generate() {
+    std::string code = generateCode();
     return SaveFile(GeneratedFileName(path_, file_name_, lang_).c_str(), code,
                     false);
   }
@@ -1361,6 +1366,11 @@ class JsTsGenerator : public BaseGenerator {
 };
 }  // namespace jsts
 
+std::string GenerateJSTSCode(const Parser &parser) {
+    jsts::JsTsGenerator generator(parser, "", "");
+    return generator.generateCode();
+}
+
 bool GenerateJSTS(const Parser &parser, const std::string &path,
                   const std::string &file_name) {
   jsts::JsTsGenerator generator(parser, path, file_name);
diff --git a/src/idl_parser.cpp b/src/idl_parser.cpp
index e26aa550..95ba12d8 100644
--- a/src/idl_parser.cpp
+++ b/src/idl_parser.cpp
@@ -255,6 +255,10 @@ CheckedError Parser::Next() {
   attribute_.clear();
   attr_is_trivial_ascii_string_ = true;
   for (;;) {
+    if (has_length_ && cursor_ >= eof_) {
+      token_ = kTokenEof;
+      return NoError();
+    }
     char c = *cursor_++;
     token_ = c;
     switch (c) {
@@ -1036,7 +1040,7 @@ CheckedError Parser::ParseTable(const StructDef &struct_def, std::string *value,
             ECHECK(SkipAnyJsonValue());
           }
         } else {
-          if (IsIdent("null") && !IsScalar(field->value.type.base_type)) {
+          if (IsIdent("null") && (opts.ignore_null_scalar || !IsScalar(field->value.type.base_type))) {
             ECHECK(Next());  // Ignore this field.
           } else {
             Value val = field->value;
@@ -1942,6 +1946,11 @@ CheckedError Parser::ParseService() {
   return NoError();
 }
 
+void Parser::SetContentLength(const bool has_length, const unsigned int len) {
+  has_length_ = has_length;
+  len_ = len;
+}
+
 bool Parser::SetRootType(const char *name) {
   root_struct_def_ = LookupStruct(name);
   if (!root_struct_def_)
@@ -2418,6 +2427,9 @@ CheckedError Parser::StartParseFile(const char *source,
   file_being_parsed_ = source_filename ? source_filename : "";
   source_ = source;
   ResetState(source_);
+  if (has_length_) {
+    eof_ = source + len_;
+  }
   error_.clear();
   ECHECK(SkipByteOrderMark());
   NEXT();
@@ -2561,6 +2573,8 @@ CheckedError Parser::DoParse(const char *source, const char **include_paths,
         std::string contents;
         if (!LoadFile(filepath.c_str(), true, &contents))
           return Error("unable to load include file: " + name);
+        bool has_length = has_length_;
+        has_length_ = false;
         ECHECK(DoParse(contents.c_str(), include_paths, filepath.c_str(),
                        name.c_str()));
         // We generally do not want to output code for any included files:
@@ -2570,6 +2584,7 @@ CheckedError Parser::DoParse(const char *source, const char **include_paths,
         root_struct_def_ = nullptr;
         file_identifier_.clear();
         file_extension_.clear();
+        has_length_ = has_length;
         // This is the easiest way to continue this file after an include:
         // instead of saving and restoring all the state, we simply start the
         // file anew. This will cause it to encounter the same include
